Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  POSTGRESDB:
    Type: String
    Description: PostgreSQL database

  POSTGRESUSER:
    Type: String
    Description: PostgreSQL user

  POSTGRESPASSWORD:
    Type: String
    NoEcho: true
    Description: PostgreSQL password

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-04e5276ebb8451442
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref SecurityGroup

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum upgrade -y
          sudo yum install -y git
          sudo yum install -y docker
          sudo usermod -a -G docker ec2-user
          sudo service docker start
          sudo chkconfig docker on
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo yum install nginx -y
          sudo service enable nginx
          sudo systemctl start nginx
          sudo mkdir /etc/nginx/sites-available
          sudo touch /etc/nginx/sites-available/honor_api.conf
          echo "server {
            listen 80 default_server;
            location / {
              proxy_pass http://localhost:3000;
              proxy_http_version 1.1;
              proxy_set_header Upgrade \$http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host \$host;
              proxy_cache_bypass \$http_upgrade;
            }
          }" | sudo tee /etc/nginx/sites-available/honor_api.conf > /dev/null
          sudo ln -s /etc/nginx/sites-available/honor_api.conf /etc/nginx/conf.d/
          sudo systemctl restart nginx
          git clone https://github.com/mactunechy/hono-api.git
          cd hono-api
          newgrp docker
          export POSTGRES_USER=${POSTGRESUSER}
          export POSTGRES_PASSWORD=${POSTGRESPASSWORD}
          export POSTGRES_DB=${POSTGRESDB}
          export POSTGRES_HOST=db
          export DATABASE_URL=postgresql://${POSTGRESUSER}:${POSTGRESPASSWORD}@db:5432/${POSTGRESDB}
          docker-compose up -d
          docker-compose exec api npx prisma migrate deploy
          docker-compose exec api npm run seed
Outputs:
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt Instance.PublicIp

  InstanceID:
    Description: ID of the EC2 instance
    Value: !Ref Instance